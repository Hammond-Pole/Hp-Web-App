<div class="custom-component">
    <label title="@QuestionFieldDescription" for="@QuestionFieldLabel" class="bold-label">@QuestionFieldLabel:</label>
    <input title="@QuestionFieldDescription" type="date" id="@QuestionFieldLabel" class="ques-inputs" @onchange="OnValueChanged" />
</div>

@code {

    [Parameter] public int DocumentId { get; set; }
    [Parameter] public int QuestionFieldId { get; set; }
    [Parameter] public string QuestionFieldLabel { get; set; } = string.Empty;
    [Parameter] public string QuestionFieldDescription { get; set; } = string.Empty;
    [Parameter] public EventCallback<dynamic> ValueChanged { get; set; }

    // This is the dynamic object we are passing back to the parent.
    private QuestionValues _questionDateValue = new();

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        _questionDateValue.DocumentId = DocumentId;
        _questionDateValue.QuestionFieldID = QuestionFieldId;
        _questionDateValue.DateValueChanged = DateTime.Now;
        _questionDateValue.DateValue = Convert.ToDateTime(e.Value);

        // Invoke the callback sending back the Value Object.
        await ValueChanged.InvokeAsync(_questionDateValue);
    }
}