@typeparam TModel

@inject IHelperFunctions _helperFunctions

<style>
    .dynamic-table {
        width: auto;
        display: inline-table;
    }

        .dynamic-table th, .dynamic-table td {
            width: auto;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
</style>

@if (Items is null)
{
    <text>Loading...</text>
}
else if (Items.Count() == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table table class="table dynamic-table">
        <thead>
            <tr>
                @foreach (var property in GetProperties())
                {
                    <th>@_helperFunctions.ConvertPascalCaseToSpaced(@property.Name)</th>
                }
                @if (OnEdit.HasDelegate || OnDelete.HasDelegate || OnDownload.HasDelegate)
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    @foreach (var property in GetProperties())
                    {
                        <td>@GetPropertyValue(item, property)</td>
                    }
                    <td>
                        <!-- Add this block -->
                        @if (OnEdit.HasDelegate)
                        {
                            <button class="btn btn-primary btn-sm" style="margin-right: 0.5rem" @onclick="() => ShowEditPopup(item)">Edit</button>
                        }
                        @if (OnDelete.HasDelegate)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item)">Delete</button>
                        }
                        @if (OnDownload.HasDelegate)
                        {
                            @foreach (var property in GetProperties())
                            {
                                if (property.Name == "FileUrl")
                                {
                                    var prop = GetPropertyValue(item, property);

                                    <a href="@prop" title="@prop" download="newfile.pdf" class="btn btn-primary btn-sm">Download</a>
                                }
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>


}
@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    [Parameter] public IEnumerable<TModel>? Items { get; set; }
    [Parameter] public EventCallback<TModel> OnEdit { get; set; }
    [Parameter] public EventCallback<TModel> OnDelete { get; set; }
    [Parameter] public EventCallback<TModel> OnDownload { get; set; }

    #region Dynamic Table Data Retrieval
    private PropertyInfo[] GetProperties()
    {
        List<PropertyInfo> properties = typeof(TModel).GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Where(p => p.GetCustomAttribute<ExcludeFromTableAttribute>() == null)
            .ToList();

        if (typeof(QuestionValues).IsAssignableFrom(typeof(TModel)))
        {
            if (typeof(QuestionValues).GetProperty("ActualValue") is not null)
            {
                properties.Add(typeof(QuestionValues).GetProperty("ActualValue")!);
            }
        }

        return properties.ToArray();
    }

    private string GetPropertyValue(object item, PropertyInfo property)
    {
        if (property.Name == "QuestionValues")
        {
            var actualValue = (item as QuestionValues)?.ActualValue;
            return actualValue?.ToString() ?? string.Empty;
        }

        object? value = property.GetValue(item);

        if (value == null)
        {
            return string.Empty;
        }

        Type valueType = value.GetType();

        if (IsComplexType(valueType))
        {
            var properties = valueType.GetProperties();
            foreach (var prop in properties)
            {
                // Check if the property has the ExcludeFromTable attribute
                var excludeFromTableAttribute = prop.GetCustomAttributes(typeof(ExcludeFromTableAttribute), true).FirstOrDefault();

                // If the property doesn't have the ExcludeFromTable attribute, return its value
                if (excludeFromTableAttribute == null)
                {
                    object? propValue = prop.GetValue(value);
                    return propValue?.ToString() ?? string.Empty;
                }
            }
        }

        return value.ToString() ?? string.Empty;
    }



    private bool IsComplexType(Type type)
    {
        return !type.IsPrimitive && !type.IsEnum && type != typeof(string) && type != typeof(decimal) && type != typeof(DateTime) && type != typeof(DateTimeOffset) && type != typeof(TimeSpan) && type != typeof(Guid);
    }
    #endregion

    #region Edit and Delete and Download button events
    private async Task ShowEditPopup(TModel item)
    {
        await OnEdit.InvokeAsync(item);
    }

    private async Task DeleteItem(TModel item)
    {
        await OnDelete.InvokeAsync(item);
    }

    private async Task DownloadItem(TModel item)
    {
        await OnDownload.InvokeAsync(item);
    }
    #endregion
}