@page "/document/edit/{documentId:int}"

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Hp_Web_App.Client.Pages.Documents.Questions;
@using Hp_Web_App.Client.Shared
@using Microsoft.AspNetCore.Components.Forms

<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDocumentService _documentService
@inject IQuestionService _questionService
@inject NavigationManager uriHelper
@inject IJSRuntime js

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="document">
    <span class="oi oi-document" aria-hidden="true"></span> Documents
</NavLink>
<br />

<!-- Header. -->
<h3>Edit Document Type</h3>

<!-- Edit Document Form. -->
<EditForm Model="@_document">
    <DataAnnotationsValidator />
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="name" style="margin-right: 20px; width: 100px;">Name</label>
        <InputText class="form-control-sm" disabled id="name" @bind-Value="_document.Name" />
    </div>
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="description" style="margin-right: 20px; width: 100px;">Description</label>
        <InputTextArea class="form-control-sm" rows="4" disabled id="description" @bind-Value="_document.Description" style="width:300px" />
    </div>
    <br />
</EditForm>

<!-- Table of Current Questions added to the Document. -->
<br />
<h3>Allocated Questions</h3>

<!-- Show a table below with the current document types. Allow the user to add more document types. -->
<DynamicTable TModel="QuestionField" Items="_questionFields" OnDelete="OnDeleteItem" />
<br />
<button @onclick="ShowAddQuestionPopup" class="btn btn-primary"> <i class="oi oi-plus"></i> Add a Question</button>

<br />
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Parameters are set in the in the Uri.
    [Parameter] public int documentId { get; set; }

    // Private properties used only in this page.
    private Document _document = new Document();
    private List<QuestionField> _questionFields = new List<QuestionField>();
    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {
        _document = await _documentService.GetDocumentAsync(documentId);
        _questionFields = await _questionService.GetQuestionFieldsByDocumentAsync(documentId);
    }

    #region CRUD Operations
    async Task UpdateDocument()
    {
        await _documentService.UpdateDocumentAsync(_document);
    }

    async Task OnDeleteItem(QuestionField questionField)
    {
        int Id = questionField.Id;
        try
        {
            await _questionService.DeleteQuestionByIdAsync(Id);
            _questionFields = await _questionService.GetQuestionFieldsByDocumentAsync(documentId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation

    async void ShowAddQuestionPopup()
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true
        };
        var parameters = new ModalParameters
        {
            { nameof(Create_Question.documentId), documentId }
        };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var questionForm = Modal.Show<Create_Question>("Add a Question", parameters, options);
        var result = await questionForm.Result;

        if (!result.Cancelled)
        {
            _questionFields = await _questionService.GetQuestionFieldsByDocumentAsync(documentId);
            StateHasChanged();
        }
    }
    #endregion
}