@page "/document/edit/{documentId:int}"

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Hp_Web_App.Client.Pages.Documents.Questions;
@using Microsoft.AspNetCore.Components.Forms

<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService
@inject NavigationManager uriHelper
@inject IJSRuntime js

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="document" style="padding: 0 0 0 0">
    <span style="display: flex; align-items: center;">
        <img src="/round-back-button.png" asp-append-version="true" width="22">
        Documents
    </span>
</NavLink>
<br />

<!-- Header. -->
<h3>Edit Document Type</h3>

<!-- Edit Document Form. -->
<EditForm Model="@_document">
    <DataAnnotationsValidator />
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="name" style="margin-right: 20px; width: 100px;">Name</label>
        <InputText class="form-control-sm" disabled id="name" @bind-Value="_document.Name" />
    </div>
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="description" style="margin-right: 20px; width: 100px;">Description</label>
        <InputTextArea class="form-control-sm" rows="4" disabled id="description" @bind-Value="_document.Description" style="width:300px" />
    </div>
    <br />
</EditForm>

<!-- Table of Current Questions added to the Document. -->
<br />
<h3>Allocated Questions</h3>

@if (_questionField == null)
{
    <!-- If this is showing, we are waiting for the data. -->
    <text>Loading...</text>
}
else if (_questionField.Count == 0)
{
    <!-- If this is showing, let the user add new questions. -->
    <text>There are no questions currently attached to this document.</text>
    <br />
    <button @onclick="ShowAddQuestionPopup" class="btn btn-primary">Add a Question</button>
}
else
{
    <!-- Show a table with the currently attached questions. Allow the user to add more questions. -->
    <table class="table table-striped" style="width: 60%;" vertical-align=center cellpadding="0">
        <thead>
            <tr>
                <th style="width: 20%;">Name</th>
                <th style="width: 50%;">Description</th>
                <th style="width: 20%;">Answer Format</th>
                <th style="width: 10%;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (QuestionField question in _questionField)
            {
                <tr style="">
                    <td>@question.Name</td>
                    <td>@question.Description</td>
                    <td>@question.QuestionFieldType.DisplayName </td>
                    <td><a class="btn btn-warning" id="deleteq" @onclick="() => DeleteQuestion(question.Id) ">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="ShowAddQuestionPopup" class="btn btn-primary">Add a Question</button>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
}


@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Parameters are set in the in the Uri.
    [Parameter] public int documentId { get; set; }

    // Private properties used only in this page.
    private Document _document = new Document();
    private List<QuestionField>? _questionField = new();
    private List<QuestionFieldType>? _questionFieldType = new();
    private string ErrorMessage = null;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {
        _document = await _dataService.GetDocumentAsync(documentId)!;
        _questionField = await _dataService.GetQuestionFieldsByDocumentAsync(documentId);
        _questionFieldType = await _dataService.GetQuestionFieldTypesAsync();
    }

    #region CRUD Operations
    async Task UpdateDocument()
    {
        await _dataService.UpdateDocumentAsync(_document);
    }

    async Task DeleteQuestion(int Id)
    {
        try
        {
            await _dataService.DeleteQuestionByIdAsync(Id);
            _questionField = await _dataService.GetQuestionFieldsByDocumentAsync(documentId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation

    async void ShowAddQuestionPopup()
    {
        var parameters = new ModalParameters
        {
            { nameof(Create_Question.documentId), documentId }
        };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var questionForm = Modal.Show<Create_Question>("Add a Question", parameters);
        var result = await questionForm.Result;

        if (!result.Cancelled)
        {
            _questionField = await _dataService.GetQuestionFieldsByDocumentAsync(documentId);
            StateHasChanged();
        }
    }
    #endregion
}