@using Microsoft.AspNetCore.Components.Forms;
@using Hp_Web_App.Client.CusomComponents;
<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDocumentService _documentService
@inject IQuestionService _questionService

<!-- Display the error at the top of the form so that we know why something failed. -->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<!-- Edit Question Form. -->
<EditForm Model="@_questionField" OnValidSubmit="@AddQuestion">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="_questionField.Name" />
        <ValidationMessage For="@(() => _questionField.Name)" />
    </div>
    <div style="margin-top: 8px;"></div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="_questionField.Description" />
        <ValidationMessage For="@(() => _questionField.Description)" />
    </div>
    <div style="margin-top: 8px;"></div>

    <div class="form-group">
        <label for="ddlQuestionFieldType">Answer Format:</label>
        <div style="display: flex; align-items: baseline;">
            <InputSelect id="ddlQuestionFieldType"
                         class="form-select"
                         @bind-Value="_questionField.QuestionFieldTypeId"
                         style="margin-right: 8px; ">
                @foreach (var item in _questionFieldType!)
                {
                    <option value="@item.Id">@item.DisplayName</option>
                }
            </InputSelect>
            @if (_questionField.QuestionFieldTypeId == 7)
            {
                <InputTextArea @bind-Value="_listAnswers" class="form-control" placeholder="Add 1 item per line for answers to this question" rows="5" style="width: 800px"></InputTextArea>
            }
        </div>
        <ValidationMessage For="@(() => _questionField.QuestionFieldTypeId)" />
        <div style="margin-top: 8px;"></div>
    </div>


    <div style="margin-top: 8px;"></div>
    <div class="form-group">
        <label for="visible">Is Visible:</label>
        <InputCheckbox id="visible" class="form-check-input" @bind-Value="_questionField.IsVisible" />
        <ValidationMessage For="@(() => _questionField.IsVisible)" />
    </div>
    <div style="margin-top: 12px;"></div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </div>
</EditForm>

<text>@_listAnswers</text>



@code {
    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    // Because this is to be a Modal window, the parameter is passed by the calling form.
    [Parameter] public int documentId { get; set; }

    // Private properties used only in this page.
    private Document _document = new Document();
    private QuestionField _questionField = new();
    private List<QuestionFieldType>? _questionFieldType = new();
    private string ErrorMessage = string.Empty;
    private string _listAnswers = string.Empty;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {
        // The document Id can never change, only set by the previous page.
        _questionField.DocumentId = documentId;
        _questionField.QuestionFieldTypeId = 3;
        _questionField.IsVisible = true;

        // Get the document details.
        _document = await _documentService.GetDocumentAsync(documentId)!;
        _questionFieldType = await _questionService.GetQuestionFieldTypesAsync();
    }

    #region CRUD Operations
    async Task AddQuestion()
    {
        try
        {
            var result = await _questionService.CreateQuestionFieldAsync(_questionField);
            if (_questionField.QuestionFieldTypeId == 7)
            {
                List<ListValue> _listValues = new List<ListValue>();

                _listAnswers.Split(new[] { '\n' }, StringSplitOptions.TrimEntries)
                .ToList()
                .ForEach(x => 
                    _listValues.Add(new ListValue 
                        {
                            Value = x, 
                            QuestionFieldId = result.Id, 
                            QuestionField = _questionField
                        }
                    )
                );

                await _questionService.CreateListValuesAsync(_listValues);
            }

            await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    async Task Close() => await BlazoredModal.CloseAsync();
    #endregion
}
