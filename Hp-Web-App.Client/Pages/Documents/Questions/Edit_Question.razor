@page "/Document/Edit/Edit_Question/{qsId:int}"


<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Hp_Web_App.Client.Pages.Documents.Questions;
@using Hp_Web_App.Client.Shared
@using Microsoft.AspNetCore.Components.Forms
@using System.Web;

<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDocumentService _documentService
@inject IQuestionService _questionService
@inject NavigationManager uriHelper
@inject IJSRuntime js


<EditForm Model="_questionField">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="_questionField.Name" />
        <ValidationMessage For="@(() => _questionField.Name)" />
    </div>
    <div style="margin-top: 8px;"></div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="_questionField.Description" />
        <ValidationMessage For="@(() => _questionField.Description)" />
    </div>
    <div style="margin-top: 8px;"></div>

    <div class="form-group">
        <label for="ddlQuestionFieldType">Answer Format:</label>
        <InputSelect id="ddlQuestionFieldType"
                     class="form-select"
                     @bind-Value="_questionField.QuestionFieldTypeId"
                     style="margin-right: 8px; ">
            @foreach (var item in _questionFieldType!)
            {
                <option value="@item.Id">@item.DisplayName</option>
            }
        </InputSelect>
        <div style="display: flex; align-items: baseline;">
            
            <br />
            @if (_questionField.QuestionFieldTypeId == 7)
            {
                
                
                <ul>
                        @foreach (var item in _questionField.ListValues!)
                        {
                            <InputText id="name" class="form-control" @bind-Value="@item.Value" style="width:420px" />
                           
                        }
                          
                </ul>
              
               
            }
        </div>
        <ValidationMessage For="@(() => _questionField.QuestionFieldTypeId)" />
        <div style="margin-top: 8px;"></div>
    </div>

   

    <div style="margin-top: 8px;"></div>
    <div class="form-group">
        <label for="visible">Is Visible:</label>
        <InputCheckbox id="visible" class="form-check-input" @bind-Value="_questionField.IsVisible" />
        <ValidationMessage For="@(() => _questionField.IsVisible)" />
    </div>
    <div style="margin-top: 12px;"></div>


    <div class="form-group">
        
        <button @onclick="UpdateQuestion" class="btn btn-primary">Update</button>
       

        
        <button @onclick="NavigaToQuestionList" class="btn btn-primary">Add question to the list</button>

        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>                                                

        <!-------
             <a href="/Add_Question_ToList?Id=@qsId">Go to Add Question List</a>
        ----->  
    </div>

   
</EditForm>


<EditForm Model="_listvalue">
  
</EditForm>


@code {
    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public int qsId { get; set; }

    [Parameter] public int ValuesqsId { get; set; }

    private QuestionField _questionField = new QuestionField();

    [Parameter] public int documentId { get; set; }

    private List<QuestionFieldType>? _questionFieldType = new();
    private List<ListValue> _listvalue = new();
    private string ErrorMessage = string.Empty;
    private Document _document = new Document();
    private string _listAnswers = string.Empty;

    // Document Answer Variables
    private Type? _selectedType;
    private int Id;

    


    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {   
        //= _questionField.Id;
        _questionField.DocumentId = documentId;
        _questionField.QuestionFieldTypeId = 3;
        _questionField.IsVisible = true;
        _questionField = await _questionService.GetQuestionFieldAsync(qsId);
        _questionFieldType = await _questionService.GetQuestionFieldTypesAsync();
        _document = await _documentService.GetDocumentAsync(documentId)!;
        _questionFieldType = await _questionService.GetQuestionFieldTypesAsync();

        /*var uri = new Uri(uriHelper.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if(query.AllKeys.Contains("Id"))
        {
            Id = int.Parse(query["Id"]);
        }*/

    }

    #region CRUD Operations
    async Task UpdateQuestion()
    {
        try
        {
            await _questionService.UpdateQuestionFieldAsync(_questionField);
            //await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        RedirectToEdit();

    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    // async Task Close() => await BlazoredModal.CloseAsync();
    #endregion



    async void RedirectToEdit()
    {



        uriHelper.NavigateTo("Document");
    }


    async Task AddQuestion()
    {
        try
        {
            var result = await _questionService.CreateQuestionFieldAsync(_questionField);
            if (_questionField.QuestionFieldTypeId == 7)
            {
                List<ListValue> _listValues = new List<ListValue>();

                _listAnswers.Split(new[] { '\n' }, StringSplitOptions.TrimEntries)
                .ToList()
                .ForEach(x =>
                    _listValues.Add(new ListValue
                        {
                            Value = x,
                            QuestionFieldId = result.Id,
                            QuestionField = _questionField
                        }
                    )
                );

                await _questionService.CreateListValuesAsync(_listValues);
            }

            //await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    
    async Task NavigaToQuestionList()
    {
        uriHelper.NavigateTo($"/Document/Edit/Edit_Question/Add_Question_ToList/" +qsId);
    }
}
