@page "/Document"
@using Hp_Web_App.Client.Shared

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDocumentService _documentService
@inject IJSRuntime js
@inject NavigationManager _navigationManager

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
    <span class="oi oi-home" aria-hidden="true"></span> Home
</NavLink>
<br />

<!-- Header. -->
<h3>Documents</h3>


<!-- Show a table below with the current document types. Allow the user to add more document types. -->
<DynamicTable TModel="Document" Items="_documents" OnEdit="OnEditItem" OnDelete="OnDeleteItem" />
<br />
<button @onclick="ShowAddQuestionPopup" class="btn btn-primary"> <i class="oi oi-plus"></i> Add a Document</button>

<br />
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}


@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Private properties used only in this page.
    private List<Document>? _documents { get; set; }
    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected override async Task OnInitializedAsync() => _documents = await _documentService.GetDocumentsAsync();

    #region CRUD Operations
    async Task OnDeleteItem(Document document)
    {
        int Id = document.Id;
        try
        {
            await _documentService.DeleteDocumentAsync(Id);
            _documents = await _documentService.GetDocumentsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation

    async void ShowAddQuestionPopup()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Create_Document>("Add a Document Type", options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _documents = await _documentService.GetDocumentsAsync();
            StateHasChanged();
        }
    }

    async void OnEditItem(Document document)
    {
        int Id = document.Id; // Assuming the item has an Id property

        //Navigate to the Edit_Document page.
        _navigationManager.NavigateTo("Document/Edit/" + Id);
    }
    #endregion
}