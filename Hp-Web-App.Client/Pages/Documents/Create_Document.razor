@using Microsoft.AspNetCore.Components.Forms
<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService

<!-- Header not required as the Modal form has a Title. -->
<!-- Display the error at the top of the form so that we know why something failed. -->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}
<!-- Create Document Form. -->
<EditForm Model="@_document" OnValidSubmit="@CreateDocument">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="_document.Name" />
        <ValidationMessage For="@(() => _document.Name)" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="_document.Description" />
        <ValidationMessage For="@(() => _document.Description)" />
        <div style="margin-top: 8px;"></div>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private Document _document = new();
    private string ErrorMessage = string.Empty;

    #region CRUD Operations
    async Task CreateDocument()
    {
        try
        {
            await _dataService.CreateDocumentAsync(_document);
            await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    async Task Close() => await BlazoredModal.CloseAsync();
    #endregion
}