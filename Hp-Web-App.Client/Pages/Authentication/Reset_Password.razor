@page "/reset/{token}"

@using Hp_Web_App.Shared.ClientFactories;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Data.SqlClient;
@using Microsoft.AspNetCore.Identity;

<!-- Dependency Injection. -->
@inject IUserService _userService;
@inject ICompanyService _companyService;
@inject IHttpClientService _httpClientService;
@inject IJSRuntime js
@inject NavigationManager navmanager;

<h4>Reset Password</h4>

<!-- Display the error at the top of the form so that we know why something failed. -->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}


<!--Add a form for me that is based on the User Class with a submit button that executes CreateUser-->
<EditForm Model="@_user" class="card-body" OnValidSubmit="@UpdateUser">

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText type="password" id="password" class="form-control" @bind-Value="_user.Password" />
        <ValidationMessage For="@(() => _user.Password)" />
    </div>
    <div class="form-group">
        <label for="password_confirm">Confirm Password:</label>
        <InputText type="password" id="password_confirm" class="form-control" @bind-Value="_confirmPassword" @oninput="ValidateConfirmPassword" />
        <ValidationMessage For="@(() => _errorMessage)" />

        @if (!string.IsNullOrWhiteSpace(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
                @_errorMessage
            </div>
        }
        else if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @_errorMessage
            </div>
        }

    </div>

    <br />
    <div class="form-group">

        <button type="button" @onclick=Cancel class="btn btn-secondary">Cancel</button>
        <button type="submit" class="btn btn-primary" disabled="@(!string.IsNullOrWhiteSpace(_errorMessage))">Submit</button>
    </div>

</EditForm>


@code {

    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public string token { get; set; } = string.Empty;
    private string ErrorMessage = string.Empty;
    private User _user = new User();
    bool isTokenValid = false;



    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    // async Task Close() => await BlazoredModal.CloseAsync();
    #endregion


    protected async override Task OnInitializedAsync()
    {
        try
        {
            _user = await _userService.GetUserbyTokenAsync(token);
            _user.Password = string.Empty;
        }
        catch (Exception)
        {
            throw;
        }
        // Get the user as soon as we have the Token.

        if (_user.Name is null)
        {
            _errorMessage = "User not found or token expired";
        }
    }

    #region Password Validation
    private string _confirmPassword = string.Empty;
    private string _errorMessage = string.Empty;

    private void ValidateConfirmPassword(ChangeEventArgs args)
    {
        _errorMessage = _user.Password == args.Value.ToString() ? string.Empty : "Passwords do not match";
    }


    #endregion



    #region CRUD Operations
    async Task UpdateUser()
    {
        var ErrorMessage = string.Empty;


        try
        {
            await _userService.UpdateUserAsync(_user);
            // await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        RedirectToLogin();
    }
    #endregion

    async Task RedirectToLogin()
    {
        await js.InvokeVoidAsync("alert", $" awesome, you have successfully updated your password, click Ok button to login");
        navmanager.NavigateTo("Login");


    }
}
