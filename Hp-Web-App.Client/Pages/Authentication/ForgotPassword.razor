<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Microsoft.AspNetCore.Components.Forms
@using Hp_Web_App.Shared.ClientFactories;
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IUserService _userService
@inject ICompanyService _companyService
@inject IHttpClientService _httpClientService;
@inject IJSRuntime js


<!-------------------
<input type="text" placeholder="Enter email address" @bind="_users.Email" />
--------------->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<EditForm Model="@_users">
    <DataAnnotationsValidator />
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
       
        <InputText class="form-control-sm" placeholder="Enter email address" id="email" @bind-Value="_users.Email" />
        <ValidationMessage For="@(() => _users.Email)" />
    </div>

    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <button class="btn btn-primary" @onclick="showspecificuser">Submit</button>
    </div>
  
</EditForm>

@code {

    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;


    // Private properties used only in this page.
    private User _users = new User();
    private string ErrorMessage = string.Empty;

    [Parameter] public string email { get; set; }
    // Load all required data when launching the page.



    async Task showspecificuser()
    {
        email = _users.Email;
        _users = await _userService.GetUserByEmailAsync(email);

       UpdateUser();
    }

    #region CRUD Operations
    async Task UpdateUser()
    {
        var ErrorMessage = string.Empty;
        var _guid = Guid.NewGuid();
        var _regkey = _guid.ToString();



        _users.RegistrationKey = _regkey;
      //  _users.IsActive = false;

        try
        {
            await _httpClientService.SendResetPasswordEmailAsync(_users.Email, _users.Name, _users.RegistrationKey);
            await js.InvokeVoidAsync("alert", $"A confirmation email has been sent to {_users.Email}, follow the link to verify your account!");

            await _userService.UpdateUserAsync(_users);
            await Close();
        }catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    async Task Close() => await BlazoredModal.CloseAsync();
    #endregion

}