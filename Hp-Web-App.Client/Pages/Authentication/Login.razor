@* This Razor file defines a login form for Hp-Web-App. *@
@page "/login";
@page "/login/{token}"

@* Import directives *@
@using Hp_Web_App.Client.Authentication;
@using System.ComponentModel.DataAnnotations;
@using Hp_Web_App.Shared.Authentication;
@using Microsoft.AspNetCore.Components.Forms

@* Dependency Injection *@
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager UriHelper
@inject IConfiguration Config

@* HTML section of the component *@
<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <EditForm Model=_model>
            <DataAnnotationsValidator />
            <div class="form-group-sm">
                <label for="email" style="width:100%">Email</label>
                <InputText style="width:100%" id="email" @bind-Value=_model.Email placeholder="Email" />
                <ValidationMessage For=@(() => _model.Email) />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="form-group-sm">
                <label for="password" style="width:100%">Password</label>
                <InputText style="width:100%" id="password" @bind-Value=_model.Password type="password" placeholder="Password" />
                <ValidationMessage For=@(() => _model.Password) />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="mb-3 text-center">
                <button id="login" class="btn btn-primary" @onclick="Authenticate">Login</button>
            </div>
            <div class="mb-3 text-center">
                <i class="text-danger">Don't have an account?</i>
                <button @onclick="async () => await ShowRegisterPopup()" class=" btn btn-link"> Register</button>
                <button @onclick="async () => await ResetPassword()" class=" btn btn-link"> Forgot Password</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; }

    // Add optional parameters to log in the user the first time.
    [Parameter] public string token { get; set; } = string.Empty;

    // Create a Model instance for binding the user's credentials in the Razor input fields.
    private Model _model = new()
        {
            Email = string.Empty,
            Password = string.Empty
        };

    /*
    The Model class defines the input fields that a user must fill in to login. The Email field has validation constraints applied to it.
    */
    private class Model
    {
        [Required(ErrorMessage = "Email is required")]
        [StringLength(50, ErrorMessage = "Email is too long.")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    /*
    When the component is initialized, check if the token in the URL is not empty. If so, get the user corresponding to that token and populate the input fields for email and password. Then call Authenticate method.
    */
    protected override async Task OnInitializedAsync()
    {
        if (token != "new" && token is not null)
        {
            var user = await UserService.GetUserbyTokenAsync(token);
            _model.Email = user.Email;
            _model.Password = user.Password;

            await Authenticate();
        }
    }

    /*
    The Authenticate method verifies the user's email and password against the user database using the UserService.
    If successful, update the AuthenticationStateProvider and redirect to the protected page: /uploaddocument.
    If failed, show an alert with invalid email or password. With both successful or failed, set _isBusy back to false.
    */
    private async Task Authenticate()
    {
        try
        {
            // Call the UserService to verify the user
            (UserSession userSession, LoginError loginError) = await UserService.Login(_model.Email, _model.Password);

            if (!loginError.Equals(LoginError.None))
            {
                // If login fails, show an alert with an error message
                await JsRuntime.InvokeVoidAsync("alert", "Invalid email or password");
                return;
            }

            // Update the Auth State Provider with the user's information, and navigate to /uploaddocument
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            UriHelper.NavigateTo("/uploaddocument", true);
        }
        catch (Exception ex)
        {
            int errorCode = 404;
            string fullErrorMessage = string.Format("Error {0}: {1}", errorCode, ex.Message);
            string errorMessage = $"An error occurred: {ex.Message}";
            await JsRuntime.InvokeVoidAsync("alert", fullErrorMessage);
            return;
        }
    }
    

    /*
     The ShowRegisterPopup method displays a modal window for the user to register.
    */
    private async Task ShowRegisterPopup()
    {
        var options = new ModalOptions { DisableBackgroundCancel = true };

        var createForm = Modal.Show<Register_User>("Register", options);
        var result = await createForm.Result;
    }

    private async Task ResetPassword()
    {
        /// UriHelper.NavigateTo("/ResetPassword", true);

        var options = new ModalOptions { DisableBackgroundCancel = true };

        var createForm = Modal.Show<ForgotPassword>("Enter your email address", options);
        var result = await createForm.Result;
    }
}