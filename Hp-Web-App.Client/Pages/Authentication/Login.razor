@page "/Authentication/Login";

@using Hp_Web_App.Client.Authentication;

@inject IUserService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager uriHelper


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Email</label>
            <input @bind="@model.Email" class="form-control" placeholder="Email" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="@model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            @if (!_isBusy)
            {
                <button id="login"  class="btn btn-primary" @onclick="Authenticate">Login</button>
            }
            else
            {
                <button id="login" class="btn btn-primary" disabled="disabled">Login</button>
            }
        </div>
    </div>
</div>

@code {

    private class Model
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private Model model = new Model();
    private UserSession _userSession = new UserSession();
    private bool _isBusy = false;
    private async Task Authenticate()
    {
        // Disable the Login button.
        _isBusy = !_isBusy;

        try
        {
            _userSession = await userService.Login(model.Email, model.Password);
            if (_userSession == null)
            {
                await js.InvokeVoidAsync("alert", "Invalid email or password");
                _isBusy = !_isBusy;
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = _userSession.UserName,
                    Role = _userSession.Role,
                    SessionId = _userSession.SessionId,
                    CompanyId = _userSession.CompanyId
                });
            uriHelper.NavigateTo("/", true);
        }
        finally
        {
            _isBusy = !_isBusy;
        }  
    }
}