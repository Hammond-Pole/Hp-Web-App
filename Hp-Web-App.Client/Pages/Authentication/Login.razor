@page "/Authentication/Login";

@using Hp_Web_App.Client.Authentication;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms

@inject IUserService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager uriHelper


<div class="row">
    <div class="col-lg-3 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <EditForm Model="_model" Ch>
            <DataAnnotationsValidator />
            <div class="form-group-sm">
                <label for="email" style="width:100%">Email</label>
                <InputText style="width:100%" id="email" @bind-Value="_model.Email" placeholder="Email" />
                <ValidationMessage For="@(() => _model.Email)" />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="form-group-sm">
                <label for="passwprd" style="width:100%">Password</label>
                <InputText style="width:100%" id="email" @bind-Value="_model.Password" type="password" placeholder="Password" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="mb-3 text-center">
                @if (!_isBusy)
                {
                    <button id="login" class="btn btn-primary" @onclick="async () => { _isBusy = true; await Authenticate(); _isBusy = false; }">Login</button>
                }
                else
                {
                    <button id="login" class="btn btn-primary" disabled>Login</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {

    private class Model
    {
        [Required]
        [StringLength(50, ErrorMessage = "Name is too long.")]
        [DataType(DataType.EmailAddress)]
        public string? Email { get; set; }
        [Required]
        public string? Password { get; set; }
    }

    private Model _model = new Model();
    private UserSession _userSession = new UserSession();
    private bool _isBusy = false;
    private async Task Authenticate()
    {
        try
        {
            _userSession = await userService.Login(_model.Email, _model.Password);
            if (_userSession == null)
            {
                await js.InvokeVoidAsync("alert", "Invalid email or password");
                _isBusy = !_isBusy;
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = _userSession.UserName,
                    Role = _userSession.Role,
                    SessionId = _userSession.SessionId,
                    CompanyId = _userSession.CompanyId
                });
            uriHelper.NavigateTo("/", true);
        }
        finally
        {
            _isBusy = !_isBusy;
        }
    }
}