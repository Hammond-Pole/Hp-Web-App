@page "/Authentication/Login";

@using Hp_Web_App.Client.Authentication;

@inject IUserService userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager uriHelper


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Email</label>
            <input @bind="@model.Email" class="form-control" placeholder="Email" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="@model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button class="btn btn-primary" @onclick="Authenticate">Login</button>
        </div>
    </div>
</div>

@code {

    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    private UserSession _userSession = new UserSession();

    private async Task Authenticate()
    {
        _userSession = await userService.Login(model.Email, model.Password);
        if (_userSession == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid email or password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = _userSession.UserName,
                Role = _userSession.Role
            });
            uriHelper.NavigateTo("/", true);    
    }
}
