@page "/Authentication/Login";

@using Hp_Web_App.Client.Authentication;
@using System.ComponentModel.DataAnnotations;
@using Hp_Web_App.Shared.Authentication;
@using Microsoft.AspNetCore.Components.Forms

@inject IUserService _userService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager uriHelper


<div class="row">
    <div class="col-lg-3 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <EditForm Model="_model" Ch>
            <DataAnnotationsValidator />
            <div class="form-group-sm">
                <label for="email" style="width:100%">Email</label>
                <InputText style="width:100%" id="email" @bind-Value="_model.Email" placeholder="Email" />
                <ValidationMessage For="@(() => _model.Email)" />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="form-group-sm">
                <label for="password" style="width:100%">Password</label>
                <InputText style="width:100%" id="password" @bind-Value="_model.Password" type="password" placeholder="Password" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <div style="height:10px; width:100%"></div>
            <div class="mb-3 text-center">

                    <button id="login" class="btn btn-primary" @onclick="async () => { _isBusy = true; await Authenticate(); _isBusy = false; }" disabled="@_isBusy">Login</button>

            </div>


        </EditForm>
    </div>
</div>

@code {

    private class Model
    {
        [Required]
        [StringLength(50, ErrorMessage = "Email is too long.")]
        [EmailAddress(ErrorMessage = "Not a valid email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private Model _model = new Model();
    private bool _isBusy = false;

    private async Task Authenticate()
    {
        try
        {
            (UserSession userSession, LoginError loginError) = await _userService.Login(_model.Email, _model.Password);

            if (!loginError.Equals(LoginError.None))
            {
                await js.InvokeVoidAsync("alert", "Invalid email or password");
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userSession.UserName,
                    Role = userSession.Role,
                    SessionId = userSession.SessionId,
                    CompanyId = userSession.CompanyId
                });
            uriHelper.NavigateTo("/uploaddocument", true);
        }
        finally
        {
            _isBusy = false;
        }
    }
}