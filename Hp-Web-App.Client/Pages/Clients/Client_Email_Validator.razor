@page "/Client_info/"

@using Hp_Web_App.Shared.ClientFactories;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Data.SqlClient;
@using Microsoft.AspNetCore.Identity;
@using System.Web;

<!-- Dependency Injection. -->
@inject IUserService _userService;
@inject ICompanyService _companyService;
@inject IHttpClientService _httpClientService;
@inject IClientService _clientService;
@inject IJSRuntime js
@inject NavigationManager navmanager;
@inject HttpClient _httpclient



<!-- Display the error at the top of the form so that we know why something failed. -->



<!--Add a form for me that is based on the User Class with a submit button that executes CreateUser-->

     <EditForm Model="@_clientdetails" OnValidSubmit="@CreateExternalClient" class="card-body">

        <div class="form-group">
            <label for="hp_reference">Account Code:</label>
            <InputText id="hpref" class="form-control" @bind-Value="_clientdetails.HP_Reference" />
        </div>

        <div class="form-group">
            <label for="Surname">Email:</label>
            <InputText id="sname" class="form-control" @bind-Value="_clientdetails.Email" />

        </div>

        <br />


             <div class="form-group">
            <button type="submit" class="btn btn-primary" disabled="@(!string.IsNullOrWhiteSpace(_errorMessage))">Submit</button>
            <button type="button" @onclick=Cancel class="btn btn-secondary">Cancel</button>
        </div>

    </EditForm>





@code {



    [Parameter]
    [SupplyParameterFromQuery(Name = "account")]
    public string hpref { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? email { get; set; }


    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;


    // Private properties used only in this page.
    private Clients_Details _clientdetails = new Clients_Details();

    private string queryParameter;
    private string queryParameter1;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {

        _clientdetails.HP_Reference = hpref;    
        _clientdetails.Email = email;



        //string urls = "https://localhost:7089/Client_info/?account=ACME0068&email=ernesth@hammondpole.co.za";
        //navmanager.NavigateTo(urls);
        //CreateExternalClient();


        
    }

    #region CRUD Operations
    async Task CreateExternalClient()
    {
        /*var ErrorMessage = string.Empty;
        var _guid = Guid.NewGuid();
        var _regkey = _guid.ToString();*/


        try
        {       
            // Verify that the email address isn't already in use.
            var _userEmailExists = await _clientService.Client_EmailExistsAsync(_clientdetails.Email);

            if (_userEmailExists)
            {
                throw new Exception("Email address already exists, try another email.");
            }

            await _clientService.CreateUserAsync(_clientdetails);


            // await _httpClientService.SendRegistrationEmailAsync(_clientdetails.Email, _clientdetails.HP_Reference, _clientdetails.RegistrationKey);
            // await js.InvokeVoidAsync("alert", $"A confirmation email has been sent to {_clientdetails.Email}, follow the link to verify your account!");
            //await Close();
        }
        catch (Exception ex)
        {            
            await js.InvokeVoidAsync("alert", $"{ex.Message}");
            return;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    //async Task Close() => await BlazoredModal.CloseAsync();
    #endregion

    #region Password Validation
    private string _confirmPassword = string.Empty;
    private string _errorMessage = string.Empty;


    

    #endregion

    

    }