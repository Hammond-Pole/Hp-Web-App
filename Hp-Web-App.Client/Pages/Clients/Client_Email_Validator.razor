@page "/Client_info/"

@using Hp_Web_App.Shared.ClientFactories;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Data.SqlClient;
@using Microsoft.AspNetCore.Identity;
@using System.Web;

<!-- Dependency Injection. -->
@inject IUserService _userService;
@inject ICompanyService _companyService;
@inject IHttpClientService _httpClientService;
@inject IClientService _clientService;
@inject IJSRuntime js
@inject NavigationManager navmanager;
@inject HttpClient _httpclient



     <EditForm Model="@_clientdetails" OnValidSubmit="@CreateExternalClient" class="card-body">

        <div class="form-group">
            <p>
            if <i><b>@hpref</b></i>  is your reference number and <b><i>@email</i></b> is your email address, please <br />
                click the link below to unsubscribe...Thank you..
            </p>
            <InputText id="hpref" class="form-control" @bind-Value="_clientdetails.HP_Reference" hidden="true" />
        </div>
 
    <div class="form-group">
        <button type="submit" class="btn btn-outline-primary btn btn-sm" @onclick="OnButtonClick">UnSubscribe</button>
       
    </div>
    
        <div class="form-group">
           
            <InputText id="sname" class="form-control" @bind-Value="_clientdetails.Email" hidden="true" />

        </div>

        <div>
    
</div>
       

    </EditForm>


@code {



    [Parameter]
    [SupplyParameterFromQuery(Name = "account")]
    public string hpref { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? email { get; set; }


    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;


    // Private properties used only in this page.
    private Clients_Details _clientdetails = new Clients_Details();


    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {

        _clientdetails.HP_Reference = hpref;    
        _clientdetails.Email = email;

    }

    #region CRUD Operations
    async Task CreateExternalClient()
    {
        /*var ErrorMessage = string.Empty;
        var _guid = Guid.NewGuid();
        var _regkey = _guid.ToString();*/


        try
        {       
            // Verify that the email address isn't already in use.
            var _userEmailExists = await _clientService.Client_EmailExistsAsync(_clientdetails.Email);

            if (_userEmailExists)
            {
                throw new Exception("You cannot unsubscribe from this page as you are still having unsettled account with us please settle your account and unsubscribe...thank you.");
            }

            await _clientService.CreateUserAsync(_clientdetails);


            // await _httpClientService.SendRegistrationEmailAsync(_clientdetails.Email, _clientdetails.HP_Reference, _clientdetails.RegistrationKey);
            // await js.InvokeVoidAsync("alert", $"A confirmation email has been sent to {_clientdetails.Email}, follow the link to verify your account!");
            //await Close();
        }
        catch (Exception ex)
        {            
            await js.InvokeVoidAsync("alert", $"{ex.Message}");
            return;
        }


      

    }
    #endregion

  
    

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    //async Task Close() => await BlazoredModal.CloseAsync();
    #endregion

    #region Password Validation
    private string _confirmPassword = string.Empty;
    private string _errorMessage = string.Empty;


    

    #endregion

   async Task OnButtonClick()
    {
        var confirmed = await js.InvokeAsync<bool>("confirm", "You cannot unsubscribe from this page as you are still having unsettled account with us please settle your account and unsubscribe...thank you.");
       
    }
}