@page "/uploaddocument"
@using Hp_Web_App.Client.CusomComponents;
@using Hp_Web_App.Client.Pages.Documents.Questions;
@using Hp_Web_App.Client.Shared
@using Microsoft.AspNetCore.Components.Forms;
@using Hp_Web_App.Shared.Authentication;

@inject IJSRuntime JSRuntime
@inject IDocumentService _documentService
@inject IQuestionService _questionService
@inject IUserService _userService
@inject ICompanyService _companyService

@inject ProtectedSessionStorage _sessionStorage
@inject IConfiguration _config

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Upload a Document</PageTitle>

<div class="card col-6">
    <div class="card-header">
        <div class="custom-header-dropdown">
            <label for="ddlDocument" class="bold-label">Document:</label>
            <select id="ddlDocument" class="form-select" @onchange="OnChange">
                <option value="" selected disabled>Select a Document.</option>
                @foreach (var document in _documents)
                {
                    <option title="@document.Description" value="@document.Id">@document.Name</option>
                })
            </select>
        </div>
    </div>

    <div class="card-body">
        @foreach (var question in _questionField)
        {
            _selectedType = question.QuestionFieldType.ComponentType;

            // Setup the dictionary of Parameters for each question.
            var FieldMeta = new Dictionary<string, dynamic>();
            FieldMeta.Add("DocumentId", question.DocumentId);
            FieldMeta.Add("QuestionFieldId", question.Id);
            FieldMeta.Add("QuestionFieldLabel", question.Name);
            FieldMeta.Add("QuestionFieldDescription", question.Description);
            if (question.QuestionFieldTypeId == 7)
            {
                FieldMeta.Add("QuestionFieldListItems", question.ListValues);
            }
            FieldMeta.Add("ValueChanged", EventCallback.Factory.Create<dynamic>(this, OnValueChanged));
            <DynamicComponent Type=@_selectedType Parameters="FieldMeta" />
        }

        <!-- Only show these components when the user selects a document. -->
        @if (_showFileUpload)
        {
            <div class="drag-drop-zone">
                <InputFile OnChange="ViewFile" />
                @_status
            </div>

            <!-- Display the Success Message on the form so that we know what happend. -->
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger card-body" role="alert">
                    @_errorMessage
                </div>
            }
            <!-- Display the Success Message on the form so that we know what happend. -->
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success card-body" role="alert">
                    @_successMessage
                    @_loadedFile.Name
                </div>
            }
            <div class="card-body" style="padding:0 0 0 0">
                <button @onclick="Save" class="btn btn-primary">Save</button>
            </div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                <text>Select a document from the list to begin!</text>
            </div>
        }
    </div>
</div>

<div><DynamicTable TModel="DocumentsAttached" Items="_documentsAttached" OnDownload="Download" /></div>
<div><DynamicTable TModel="QuestionValue" Items="_previousQuestionValues" /></div>



@code {

    #region Update Question Values
    private void OnValueChanged(dynamic value)
    {
        var questionType = _questionField.Where(x => x.Id == value.QuestionFieldID)
                                         .Select(x => x.QuestionFieldTypeId)
                                         .FirstOrDefault();
        switch (questionType)
        {
            case 1:
                UpdateOrAddValue(_questionDateValues, (QuestionValues)value, x => x.DateValue = value.DateValue);
                break;
            case 2:
                UpdateOrAddValue(_questionBitValues, (QuestionValues)value, x => x.BoolValue = value.BoolValue);
                break;
            case 3:
                UpdateOrAddValue(_questionStringValues, (QuestionValues)value, x => x.StringValue = value.StringValue);
                break;
            case 4:
                UpdateOrAddValue(_questionIntValues, (QuestionValues)value, x => x.IntValue = value.IntValue);
                break;
            case 5:
                UpdateOrAddValue(_questionFloatValues, (QuestionValues)value, x => x.FloatValue = value.FloatValue);
                break;
            case 6:
                UpdateOrAddValue(_questionMemoValues, (QuestionValues)value, x => x.MemoValue = value.MemoValue);
                break;
            case 7:
                UpdateOrAddValue(_questionSelectValues, (QuestionValues)value, x => x.ListValueId = value.ListValueId);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(questionType), questionType, null);
        }
        StateHasChanged();
    }

    private void UpdateOrAddValue<T>(List<T> list, QuestionValue value, Action<T> updateAction) where T : QuestionValue
    {
        var existingValue = list.FirstOrDefault(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID);

        if (existingValue != null)
        {
            updateAction(existingValue);
        }
        else
        {
            list.Add((T)value);
        }
    }
    #endregion

    #region Variable Initialization
    // Constants
    private const string _defaultStatus = "Drop a text file here to view it, or click to choose a file";
    private const int _maxFileSize = 3 * 1024 * 1024; // 3MB

    // State
    private string _status = _defaultStatus;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private bool _showFileUpload = false;

    // File handling
    private IBrowserFile _loadedFile = null!;
    private MemoryStream? _fileStream;

    // Document Answer Variables
    private Type? _selectedType;

    // Lists
    private List<Document> _documents = new();
    private List<CompanyDocument> _companyDocuments = new();
    private List<QuestionField> _questionField = new();
    private List<QuestionFieldType> _questionFieldType = new();
    private List<DocumentsAttached> _documentsAttached = new();

    // Question Lists
    private List<QuestionValue> _questionValues = new();
    private List<QuestionValues> _questionDateValues = new();
    private List<QuestionValues> _questionBitValues = new();
    private List<QuestionValues> _questionStringValues = new();
    private List<QuestionValues> _questionIntValues = new();
    private List<QuestionValues> _questionFloatValues = new();
    private List<QuestionValues> _questionMemoValues = new();
    private List<QuestionValues> _questionSelectValues = new();

    private List<QuestionValues> _previousQuestionValues = new();

    // Related Objects
    private DocumentsAttached _documentAttached = new();
    private User _user = new();

    // Identifiers
    private int _documentsId;

    // Properties
    public string UserSession { get; set; } = string.Empty;
    public string UserName { get; set; } = string.Empty;

    #endregion

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadUserSessionAsync();
        await LoadUniqueCompanyDocumentsAsync();
        await LoadQuestionFieldTypesWithComponentsAsync();
        await LoadDocumentsAttached();
        await LoadPreviousQuestionValues();
        StateHasChanged();
    }
    #endregion

    #region Document Questions
    public async void OnChange(ChangeEventArgs e)
    {
        _status = _defaultStatus;
        _loadedFile = null;
        _questionField = await _documentService.GetQuestionFieldsByDocumentAsync(Convert.ToInt32(e.Value));
        _documentsId = Convert.ToInt32(e.Value);
        _showFileUpload = true;


        StateHasChanged();
    }
    #endregion

    #region Helper Functions
    private async Task LoadUserSessionAsync()
    {
        var userSessionResult = await _sessionStorage.GetAsync<UserSession>("UserSession");
        UserSession = userSessionResult.Value.UserName!;

        _user = await _userService.GetUserByEmailAsync(UserSession);
        UserSession = _user.Name;
    }

    private async Task LoadUniqueCompanyDocumentsAsync()
    {
        var companyDocuments = await _documentService.GetCompanyDocumentsByCompanyAsync(_user.CompanyId);

        foreach (var item in companyDocuments)
        {
            var document = await _documentService.GetDocumentAsync(item.DocumentId);
            if (!_documents.Any(x => x.Id == document.Id))
            {
                _documents.Add(document);
            }
        }
    }

    private async Task LoadQuestionFieldTypesWithComponentsAsync()
    {
        var questionFieldTypes = await _questionService.GetQuestionFieldTypesAsync();

        foreach (var fieldType in questionFieldTypes)
        {
            fieldType.ComponentType = Type.GetType($"Hp_Web_App.Client.CusomComponents.Component_{fieldType.ComponentName}");
        }
    }

    private async Task ClearAndReloadDataAsync()
    {
        ClearQuestionValueLists();
        await LoadUniqueCompanyDocumentsAsync();
        StateHasChanged();
    }

    private void ClearQuestionValueLists()
    {
        _questionDateValues.Clear();
        _questionBitValues.Clear();
        _questionStringValues.Clear();
        _questionIntValues.Clear();
        _questionFloatValues.Clear();
        _questionMemoValues.Clear();
        _questionSelectValues.Clear();
    }

    private List<string> GetNonEmptyQuestionValueListNames()
    {
        var nonEmptyLists = new List<string>();

        if (_questionDateValues.Any()) nonEmptyLists.Add(nameof(_questionDateValues));
        if (_questionBitValues.Any()) nonEmptyLists.Add(nameof(_questionBitValues));
        if (_questionStringValues.Any()) nonEmptyLists.Add(nameof(_questionStringValues));
        if (_questionIntValues.Any()) nonEmptyLists.Add(nameof(_questionIntValues));
        if (_questionFloatValues.Any()) nonEmptyLists.Add(nameof(_questionFloatValues));
        if (_questionMemoValues.Any()) nonEmptyLists.Add(nameof(_questionMemoValues));
        if (_questionSelectValues.Any()) nonEmptyLists.Add(nameof(_questionSelectValues));

        return nonEmptyLists;
    }

    private async Task LoadDocumentsAttached()
    {
        // TODO: This is a temporary solution. Need to validate if the user can see all the documents or just their own.
        _documentsAttached = await _documentService.GetDocumentsAttachedByUserForCompanyAsync(_user.CompanyId);

        foreach (var documentAttached in _documentsAttached)
        {
            string DocumentLink = Path.Combine(_config.GetValue<string>("FileShare")!, documentAttached.FileUrl.Replace("/PortalFiles", ""));
        }

    //    foreach (var item in _documentsAttached)
    //    {
    //        item.DocumentLink = $"/documents/{item.DocumentId}";
    //    }
    }

    private async Task LoadPreviousQuestionValues()
    {
        _previousQuestionValues = await _questionService.GetAllQuestionValuesAsync();
    }
    #endregion

    #region File Upload
    async Task ViewFile(InputFileChangeEventArgs e)
    {
        _errorMessage = string.Empty;
        _loadedFile = null;
        // Save the instance of the file into an IBrowserFile object.
        _loadedFile = e.File;
        _status = e.File.Name;

        // Validate that the stream is empty.
        if (_fileStream is not null)
        {
            _fileStream.Dispose();
        }

        // Create a new stream and copy the file into it.
        _fileStream = new MemoryStream();
        await _loadedFile.OpenReadStream().CopyToAsync(_fileStream);

        StateHasChanged();
    }

    async Task Save()
    {
        // Only continue if the file has been copied to the filestream.
        if (_loadedFile is null || _fileStream is null)
        {
            _errorMessage = "No file has been selected. Please select a file to continue.";

            return;
        }

        try
        {
            _fileStream.Position = 0;

            // Get the document details from the database.
            var document = await _documentService.GetDocumentAsync(_documentsId);
            var company = await _companyService.GetCompanyAsync(_user.CompanyId);

            // Change the filename to "DocumentName_UsersName_CompanyName_Date" and append the extension.
            var newFileName = $"{document.Name}_{_user.Name}_{company.Name.Replace(" ", "")}_{DateTime.Now.ToString("yyyyMMddhhmmss")}{Path.GetExtension(_loadedFile.Name)}";
            string saveDirectory = Path.Combine(_config.GetValue<string>("FileShare")!, _user.Name!);
            Directory.CreateDirectory(saveDirectory);
            string filePath = Path.Combine(_config.GetValue<string>("FileShare")!, _user.Name!, newFileName);

            // Save the file to the directory.
            await using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);
            await _fileStream.CopyToAsync(fileStream);


            _documentAttached.UploadDate = DateTime.Now;
            _documentAttached.DocumentId = _documentsId;
            _documentAttached.UserId = _user.Id;
            _documentAttached.CompanyId = _user.CompanyId;
            _documentAttached.FileName = newFileName;
            _documentAttached.FileDescription = string.Empty;
            _documentAttached.FileUrl = filePath;

            // Retrieve the Id of the newly inserted document.
            _documentAttached = await _documentService.CreateDocumentsAttachedAsync(_documentAttached);

            // Check which lists have data. That would mean that they have answered questions.
            List<string> nonEmptyLists = GetNonEmptyQuestionValueListNames();

            // For each list that has data, call the AddQuestionValuesAsync(List<T> questionValues) to add it to the database.
            foreach (var item in nonEmptyLists)
            {
                switch (item)
                {
                    case nameof(_questionDateValues):
                        foreach (var date in _questionDateValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionDateValues);
                        break;
                    case nameof(_questionBitValues):
                        foreach (var date in _questionBitValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionBitValues);
                        break;
                    case nameof(_questionStringValues):
                        foreach (var date in _questionStringValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionStringValues);
                        break;
                    case nameof(_questionIntValues):
                        foreach (var date in _questionIntValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionIntValues);
                        break;
                    case nameof(_questionFloatValues):
                        foreach (var date in _questionFloatValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionFloatValues);
                        break;
                    case nameof(_questionMemoValues):
                        foreach (var date in _questionMemoValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionMemoValues);
                        break;
                    case nameof(_questionSelectValues):
                        foreach (var date in _questionSelectValues)
                        {
                            date.DocumentsAttachedId = _documentAttached.Id;
                        }
                        await _questionService.CreateQuestionValuesAsync(_questionSelectValues);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(item), item, null);
                }
            }
            _successMessage = "Upload Successful.";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            return;
        }


        StateHasChanged();
    }
    #endregion

    async Task Download(DocumentsAttached documentsAttached)
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", documentsAttached.FileUrl, documentsAttached.FileName);
    }
}



