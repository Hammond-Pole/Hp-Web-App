@page "/uploaddocument"
@using Hp_Web_App.Client.CusomComponents;
@using Hp_Web_App.Client.Pages.Documents.Questions;

@inject IJSRuntime JSRuntime
@inject IDataService _dataService
@inject ProtectedSessionStorage _sessionStorage
@inject IConfiguration _config

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Upload a Document</PageTitle>

<div class="card col-6">
    <div class="card-header">
        <div class="custom-header-dropdown">
            <label for="ddlDocument" class="bold-label">Document:</label>
            <select id="ddlDocument" class="form-select" @onchange="OnChange">
                <option value="" selected disabled>Select a Document.</option>
                @foreach (var document in _documents)
                {
                    <option value="@document.Id">@document.Name</option>
                })
            </select>
        </div>
    </div>

    <div class="card-body">
        @foreach (var question in _questionField)
        {
            selectedType = question.QuestionFieldType.ComponentType;

            // Setup the dictionary of Parameters for each question.
            var FieldMeta = new Dictionary<string, dynamic>();
            FieldMeta.Add("DocumentId", question.DocumentId);
            FieldMeta.Add("QuestionFieldId", question.Id);
            FieldMeta.Add("QuestionFieldLabel", question.Name);
            FieldMeta.Add("ValueChanged", EventCallback.Factory.Create<dynamic>(this, OnValueChanged));
            <DynamicComponent Type=@selectedType Parameters="FieldMeta" />
        }

        <div class="drag-drop-zone">
            <InputFile OnChange="ViewFile" />
            @status
        </div>
        <button @onclick="Save" class="btn btn-primary">Save</button>
    </div>
</div>

@code {

    #region Update Question Values
    // Create a method that handles the OnValueChanged EventCallback.
    private List<QuestionDateValue> _questionDateValues = new();
    private List<QuestionBitValue> _questionBitValues = new();
    private List<QuestionStringValue> _questionStringValues = new();
    private List<QuestionIntValue> _questionIntValues = new();
    private List<QuestionFloatValue> _questionFloatValues = new();
    private List<QuestionMemoValue> _questionMemoValues = new();

    private void OnValueChanged(dynamic value)
    {
        // lookup the QuestionFieldTypeId from the QuestionFieldID in the value object.
        var questionType = _questionField.Where(x => x.Id == value.QuestionFieldID).Select(x => x.QuestionFieldTypeId).FirstOrDefault();
        switch (questionType)
        {
            case 1:
                //do something for QuestionDateValue
                var existingDateValue = _questionDateValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingDateValue != null)
                {
                    existingDateValue.DateValue = value.DateValue;
                }
                else
                {
                    _questionDateValues.Add(value);
                }
                StateHasChanged();
                break;
            case 2:
                //do something for QuestionBitValue
                var existingBitValue = _questionBitValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingBitValue != null)
                {
                    existingBitValue.BoolValue = value.BoolValue;
                }
                else
                {
                    _questionBitValues.Add(value);
                }
                StateHasChanged();
                break;
            case 3:
                //do something for QuestionStringValue
                // Check if there is a matching DocumentId and QuestionFieldId. Update the value if it exists.
                var existingValue = _questionStringValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingValue != null)
                {
                    existingValue.StringValue = value.StringValue;
                }
                else
                {
                    _questionStringValues.Add(value);
                }
                StateHasChanged();
                break;
            case 4:
                //do something for QuestionIntValue
                var existingIntValue = _questionIntValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingIntValue != null)
                {
                    existingIntValue.IntValue = value.IntValue;
                }
                else
                {
                    _questionIntValues.Add(value);
                }
                StateHasChanged();
                break;
            case 5:
                //do something for QuestionFloatValue
                var existingFloatValue = _questionFloatValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingFloatValue != null)
                {
                    existingFloatValue.FloatValue = value.FloatValue;
                }
                else
                {
                    _questionFloatValues.Add(value);
                }
                StateHasChanged();
                break;
            case 6:
                //do something for QuestionMemoValue
                var existingMemoValue = _questionMemoValues.Where(x => x.DocumentId == value.DocumentId && x.QuestionFieldID == value.QuestionFieldID).FirstOrDefault();
                if (existingMemoValue != null)
                {
                    existingMemoValue.MemoValue = value.MemoValue;
                }
                else
                {
                    _questionMemoValues.Add(value);
                }
                StateHasChanged();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(questionType), questionType, null);
        }


    }
    #endregion

    #region Variable Initialization

    // File Upload Variables.
    IFileListEntry file;
    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 3 * 1024 * 1024; // 3MB
    string status = DefaultStatus;

    string fileName;
    string fileTextContents;

    // Document Answer Variables.
    private Type selectedType;


    private List<Document> _documents = new();

    private List<CompanyDocument> _companyDocuments = new();
    private List<QuestionField> _questionField = new();
    private List<QuestionFieldType> _questionFieldType = new();
    private List<QuestionValue> _questionValues = new();
    private User _user = new();

    private int _documentsId;

    private string userSession { get; set; }
    private string usersName { get; set; }
    #endregion

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        // Get the current session data.
        var userSessionStorageResult = await _sessionStorage.GetAsync<UserSession>("UserSession");
        userSession = userSessionStorageResult.Value.UserName;

        // Get the users information from the session data and get the list of documents they have access to.
        _user = await _dataService.GetUserByEmailAsync(userSession);
        usersName = _user.Name;

        _companyDocuments = await _dataService.GetCompanyDocumentsByCompanyAsync(_user.CompanyId);

        // for each document id in the _companyDocuments list, get the document and add it to the _documents list.
        // do not duplicate the id's.
        foreach (var item in _companyDocuments)
        {
            var document = await _dataService.GetDocumentAsync(item.DocumentId);
            if (!_documents.Any(x => x.Id == document.Id))
            {
                _documents.Add(document);
            }
        }
        _questionFieldType = await _dataService.GetQuestionFieldTypesAsync();

        foreach (var item in _questionFieldType)
        {
            item.ComponentType = Type.GetType($"Hp_Web_App.Client.CusomComponents.Component_{item.ComponentName}");
        }
        StateHasChanged();
    }
    #endregion

    #region Document Questions
    public async void OnChange(ChangeEventArgs e)
    {
        _questionField = await _dataService.GetQuestionFieldsByDocumentAsync(Convert.ToInt32(e.Value));
        _documentsId = Convert.ToInt32(e.Value);

        StateHasChanged();
    }
    #endregion


    #region File Upload
    async Task ViewFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var reader = new StreamReader(file.Data))
            {
                fileTextContents = await reader.ReadToEndAsync();
                fileName = file.Name;
            }
            status = DefaultStatus;
        }
    }

    async Task Save()
    {
        // Change the filename to "DocumentName_UsersName_Date" and append the extension.
        var document = await _dataService.GetDocumentAsync(_documentsId);
        var newFileName = $"{document.Name}_{_user.Name}_{DateTime.Now.ToString("yyyyMMddhhmmss")}{Path.GetExtension(fileName)}";
        fileName = fileName + " => " + newFileName;

        string path = Path.Combine(_config.GetValue<string>("FileShare")!, _user.Name!, newFileName);
        Directory.CreateDirectory(Path.Combine(_config.GetValue<string>("FileShare")!, _user.Name!));

        // Write the fileTextContents to the path.
        await System.IO.File.WriteAllTextAsync(path, fileTextContents);

        StateHasChanged();
    }

    #endregion
}
