@page "/company"
@using Hp_Web_App.Client.Shared

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService
@inject IJSRuntime js
@inject NavigationManager _navigationManager

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="/" style="padding: 0 0 0 0">
    <span style="display: flex; align-items: center;">
        <text> <i class="oi oi-arrow-circle-left"></i> Home</text>
    </span>
</NavLink>
<br />

<!-- Header. -->
<h3>Companies</h3>

<!-- Show a table below with the current document types. Allow the user to add more document types. -->
<DynamicTable TModel="Company" Items="_companies" OnEdit="OnEditItem" OnDelete="OnDeleteItem" />
<br />
<button class="btn btn-primary" @onclick="ShowCreatePopup"><i class="oi oi-plus"></i> Add a Company</button>


@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Private properties used only in this page.
    private List<CompanyType>? _companyTypes { get; set; }
    private List<Company>? _companies { get; set; }

    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected override async Task OnInitializedAsync()
    {
        _companies = await _dataService.GetCompaniesAsync();
        _companyTypes = await _dataService.GetCompanyTypesAsync();
    }

    #region CRUD Operations
    async Task OnDeleteItem(Company company)
    {
        try
        {
            await _dataService.DeleteCompanyAsync(company);
            _companies = await _dataService.GetCompaniesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation
    async void ShowCreatePopup()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Create_Company>("Add a Company", options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _companies = await _dataService.GetCompaniesAsync();
            StateHasChanged();
        }
    }

    async void OnEditItem(Company company)
    {
        int Id = company.Id; // Assuming the item has an Id property

        //Navigate to the Edit_Document page.
        _navigationManager.NavigateTo("Company/Edit/" + Id);
    }
    #endregion
}
