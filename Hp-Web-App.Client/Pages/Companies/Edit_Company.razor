@page "/company/edit/{companyId:int}"

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Hp_Web_App.Client.Pages.Companies.CompanyDocuments;
@using Hp_Web_App.Client.Shared
@using Microsoft.AspNetCore.Components.Forms

<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDocumentService _documentService
@inject ICompanyService _companyService
@inject NavigationManager _navigationManager
@inject IJSRuntime js

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="company">
    <span class="oi oi-briefcase" aria-hidden="true"></span> Companies
</NavLink>
<br />

<!-- Header. -->
<h3>Edit @_company.Name Details</h3>

<!-- Edit Company Form. -->
<EditForm Model="@_company" OnValidSubmit="Submit" style="width: 40%;">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="ddlCompanyType" style="margin-right: 30px; width: 100px;">Type:</label>
        <InputSelect id="ddlCompanyType"
                     asp-for="CompanyTypeId"
                     class="form-control-sm"
                     @bind-Value="_company.CompanyTypeId">
            @foreach (var companyType in _companyTypes)
            {
                <option value="@companyType.Id">@companyType.Name</option>
            }
        </InputSelect>
        <button type="submit" class="btn btn-primary m-lg-4 ">Update Type</button>
    </div>
    <br />
</EditForm>

<!-- Table of Current Documents added to the Company. -->
<br />
<h3>Allocated Documents</h3>

<!-- Show a table below with the current document types. Allow the user to add more document types. -->
<DynamicTable TModel="CompanyDocument" Items="_company.CompanyDocuments" OnDelete="OnDeleteItem" />
<br />
<button @onclick="ShowAddPopup" class="btn btn-primary"> <i class="oi oi-plus"></i> Add a Document</button>

<br />
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}


@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Parameters are set in the in the Uri.
    [Parameter] public int companyId { get; set; }

    // Private properties used only in this page.
    private Company _company = new();
    private List<Document> _documents = new();
    private List<CompanyType> _companyTypes = new();
    private List<CompanyDocument> _companyDocuments = new();
    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {
        _company = await _companyService.GetCompanyAsync(companyId)!;
        _companyTypes = await _companyService.GetCompanyTypesAsync();
    }

    #region CRUD Operations
    async Task Submit()
    {
        try
        {
            await _companyService.UpdateCompanyAsync(_company);
            await js.InvokeVoidAsync("alert", "Updated!");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", "Error: {ex.message}", ex.Message);
        }
        
    }

    async Task OnDeleteItem(CompanyDocument companyDocument)
    {
        try
        {
            await _documentService.DeleteCompanyDocumentAsync(companyDocument);
            _companyDocuments = await _documentService.GetCompanyDocumentsByCompanyAsync(_company.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation

    async void ShowAddPopup()
    {
        var parameters = new ModalParameters
        {
            { nameof(Add_CompanyDocuments.companyId), companyId }
        };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var questionForm = Modal.Show<Add_CompanyDocuments>("Add a Document", parameters);
        var result = await questionForm.Result;

        if (!result.Cancelled)
        {
            _companyDocuments = await _documentService.GetCompanyDocumentsByCompanyAsync(companyId);
            StateHasChanged();
        }
    }
    #endregion
}