<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService

<!-- Display the error at the top of the form so that we know why something failed. -->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<!-- Edit Company Form. -->
<div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
    <label for="ddlQuestionFieldType" style="margin-right: 30px; width: 100px;">Format:</label>
    <select id="ddlQuestionFieldType"
            asp-for="QuestionFieldTypeId"
            class="form-control-sm"
            placeholder="Select a answer format."
            @onchange="@((ChangeEventArgs e) =>
                                {
                                    _companyDocument.DocumentId = Convert.ToInt32(e.Value);                                        
                                })">
        <option value="" selected disabled>Select an Answer Type</option>
        @foreach (var document in _documents!)
        {
            <option value="@document.Id ">@document.Name.</option>
        }
    </select>
</div>
<br />
<button @onclick="Submit" class="btn btn-primary">Submit</button>
<button @onclick="Cancel" class="btn btn-secondary">Cancel</button>


@code {
    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    // Because this is to be a Modal window, the parameter is passed by the calling form.
    [Parameter] public int companyId { get; set; }

    // Private properties used only in this page.
    private Company _company = new();
    private CompanyDocument _companyDocument = new();
    private List<Document> _documents = new();
    private List<CompanyDocument>? _companyDocuments = new();
    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {

        // Get the document details.
        _companyDocuments = await _dataService.GetCompanyDocumentsByCompanyAsync(companyId)!;
        _documents = await _dataService.GetDocumentsAsync()!;
    }

    #region CRUD Operations
    async Task Submit()
    {
        try
        {
            _companyDocument.CompanyId = companyId;
            await _dataService.CreateCompanyDocumentAsync(_companyDocument);
            await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    async Task Delete(CompanyDocument companyDocument)
    {
        try
        {
            await _dataService.DeleteCompanyDocumentAsync(companyDocument);
            _companyDocuments = await _dataService.GetCompanyDocumentsByCompanyAsync(companyId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    async Task Close() => await BlazoredModal.CloseAsync();
    #endregion
}
