<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
@using Microsoft.AspNetCore.Components.Forms
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService

<!-- Display the error at the top of the form so that we know why something failed. -->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<!--Add a form for me that is based on the User Class with a submit button that executes CreateUser-->
<EditForm Model="@_user" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group-sm" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="name" style="margin-right: 30px; width: 100px;"> Full Name:</label>
        <InputText class="form-control-sm" id="name" @bind-Value="_user.Name" />
    </div>
    <div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="email" style="margin-right: 30px; width: 100px;">Email:</label>
        <InputText class="form-control-sm" id="email" @bind-Value="_user.Email" />
    </div>
    <div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="password" style="margin-right: 30px; width: 100px;">Password:</label>
        <InputText class="form-control-sm" id="password" @bind-Value="_user.Password" />
    </div>
    <div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="ddlUserRole" style="margin-right: 30px; width: 100px;">Role:</label>
        <select id="ddlUserRole"
                asp-for="RoleId"
                class="form-control-sm"
                @onchange="@((ChangeEventArgs e) =>
                                {
                                    _user.UserRoleId = Convert.ToInt32(e.Value);
                                })">
            <option value="" selected disabled>Select a Role.</option>
            @foreach (var role in _userRoles)
            {
                <option value="@role.Id">@role.Name</option>
            }
        </select>
    </div>


    <div class="form-group" style="display: flex; align-items: center; margin-bottom: 10px;">
        <label for="ddlUserCompany" style="margin-right: 30px; width: 100px;">Company:</label>
        <select id="ddlUserCompany"
                asp-for="CompanyId"
                class="form-control-sm"
                @onchange="@((ChangeEventArgs e) =>
                                {
                                    _user.CompanyId = Convert.ToInt32(e.Value);
                                })">
            <option value="" selected disabled>Select a Company.</option>
            @foreach (var company in _companies!)
            {
                <option value="@company.Id">@company.Name</option>
            }
        </select>
    </div>
    <br />

    <button @onclick="CreateUser" class="btn btn-primary">Submit</button>
    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
</EditForm>

@code {
    // Parameter used to insert the current page into as a Modal window.
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    // Private properties used only in this page.
    private User _user = new User();
    private List<Company> _companies = new();
    private List<UserRole> _userRoles = new();
    private string ErrorMessage = null;

    // Load all required data when launching the page.
    protected async override Task OnInitializedAsync()
    {
        _companies = await _dataService.GetCompaniesAsync();
        _userRoles = await _dataService.GetUserRolesAsync();
    }

    #region CRUD Operations
    async Task CreateUser()
    {
        try
        {
            await _dataService.CreateUserAsync(_user);
            await Close();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Modal Operations
    async Task Cancel() => await BlazoredModal.CancelAsync();
    async Task Close() => await BlazoredModal.CloseAsync();
    #endregion


}
