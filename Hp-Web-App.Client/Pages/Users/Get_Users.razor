@page "/user"
@using Hp_Web_App.Client.Shared

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IUserService _userService
@inject IJSRuntime js

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
    <span class="oi oi-home" aria-hidden="true"></span> Home
</NavLink>
<br />

<!-- Header. -->
<h3>Users</h3>

<DynamicTable TModel="User" Items="_users" OnEdit="ShowEditPopup" OnDelete="OnDeleteItem" />
<br />
<button @onclick="ShowAddPopup" class="btn btn-primary"> <i class="oi oi-plus"></i> Add a User</button>

@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; }

    // Private properties used only in this page.
    private List<User> _users { get; set; }
    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected override async Task OnInitializedAsync()
    {
        _users = await _userService.GetUsersAsync();
    }

    #region CRUD Operations
    async Task OnDeleteItem(User user)
    {
        try
        {
            // Validate that the userId is on -1 if it is then show an error message.
            if (user.Id == -1)
            {
                await js.InvokeVoidAsync("alert", "This user cannot be deleted!");
                return;
            }

            await _userService.DeleteUserAsync(user.Id);
            _users = await _userService.GetUsersAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #region Navigation
    async void ShowAddPopup()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Create_User>("Add a User", options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _users = await _userService.GetUsersAsync();
            StateHasChanged();
        }
    }

    async void ShowEditPopup(User editUser)
    {
        int userId = editUser.Id;

        // Validate that the userId is on -1 if it is then show an error message.
        if (userId == -1)
        {
            await js.InvokeVoidAsync("alert", "This user cannot be edited!");
            return;
        }
        var parameters = new ModalParameters
        {
            { nameof(Edit_Users.userId), userId }
        };
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Edit_Users>("Edit User", parameters, options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _users = await _userService.GetUsersAsync();
            StateHasChanged();
        }
    }
    #endregion
    #endregion
}
