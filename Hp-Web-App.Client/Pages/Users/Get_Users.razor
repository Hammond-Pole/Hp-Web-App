@page "/user"

<!-- Page Specific Using Satements. If there are general ones then add them to _Imports.razor. -->
<!-- Only Administrators are allowed to browse to this page. -->
@attribute [Authorize(Roles = "Administrator")]

<!-- Dependency Injection. -->
@inject IDataService _dataService
@inject IJSRuntime js

<!-- Back Button Navigation. -->
<NavLink class="nav-link" href="/" style="padding: 0 0 0 0">
    <span style="display: flex; align-items: center;">
        <text> <i class="oi oi-arrow-circle-left"></i> Home</text>
    </span>
</NavLink>
<br />

<!-- Header. -->
<h3>Users</h3>

@if (_users == null)
{
    <text>Loading...</text>
}
else if (_users.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
    <br />
    <table class="table table-striped" style="width: 70%;" vertical-align=center cellpadding="0">
        <thead>
            <tr>
                <th style="width: 20%;">Name</th>
                <th style="width: 40%;">Email</th>
                <th style="width: 10%;">Role</th>
                <th style="width: 20%;">Company</th>
                <th style="width: 5%;"></th>
                <th style="width: 5%;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (User user in _users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.UserRole.Name</td>
                    <td>@user.Company.Name</td>
                    <td><a class="btn btn-primary" id="edit" @onclick="() => ShowEditPopup(user.Id) ">Edit</a></td>
                    <td><a class="btn btn-warning" id="deleted" @onclick="() => Delete(user) ">Delete</a></td>
                </tr>
            }

        </tbody>
    </table>

    <!-- Show a table above with the current users. Allow the user to add more users. -->
    <button @onclick="ShowAddPopup" class="btn btn-primary"> <i class="oi oi-plus"></i> Add a User</button>

}
@code {
    // Parameter used to enable the popup/modal window.
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    // Private properties used only in this page.
    private List<User>? _users { get; set; }
    private List<UserRole>? _userRoles { get; set; }
    private List<Company>? _companies { get; set; }

    private string ErrorMessage = string.Empty;

    // Load all required data when launching the page.
    protected override async Task OnInitializedAsync()
    {
        _users = await _dataService.GetUsersAsync();
        _companies = await _dataService.GetCompaniesAsync();
        _userRoles = await _dataService.GetUserRolesAsync();
    }

    #region CRUD Operations
    async Task Delete(User user)
    {
        try
        {
            await _dataService.DeleteUserAsync(user);
            _users = await _dataService.GetUsersAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    #endregion

    #region Navigation
    async void ShowAddPopup()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Create_User>("Add a User", options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _users = await _dataService.GetUsersAsync();
            StateHasChanged();
        }
    }

    async void ShowEditPopup(int editUser)
    {
        var parameters = new ModalParameters
        {
            { nameof(Edit_Users.userId), editUser }
        };
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        // Call the add form and wait to see if there is an Ok or Cancel.
        var createForm = Modal.Show<Edit_Users>("Edit User", parameters, options);
        var result = await createForm.Result;

        if (!result.Cancelled)
        {
            _users = await _dataService.GetUsersAsync();
            StateHasChanged();
        }
    }
    #endregion
}
